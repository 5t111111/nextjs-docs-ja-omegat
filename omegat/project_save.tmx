<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.1.5_3_10490" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>"build": "next build",</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041413Z" creationid="hirofumiwakasugi" creationdate="20181119T041413Z">
        <seg>"build": "next build",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"dev": "next",</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041412Z" creationid="hirofumiwakasugi" creationdate="20181119T041412Z">
        <seg>"dev": "next",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"dev": "node server.js",</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062958Z" creationid="hirofumiwakasugi" creationdate="20181220T062958Z">
        <seg>"dev": "node server.js",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"scripts": {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041412Z" creationid="hirofumiwakasugi" creationdate="20181119T041412Z">
        <seg>"scripts": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"start": "NODE_ENV=production node server.js"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062959Z" creationid="hirofumiwakasugi" creationdate="20181220T062959Z">
        <seg>"start": "NODE_ENV=production node server.js"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"start": "next start"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041414Z" creationid="hirofumiwakasugi" creationdate="20181119T041414Z">
        <seg>"start": "next start"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## How to use</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041407Z" creationid="hirofumiwakasugi" creationdate="20181119T041238Z">
        <seg>## 使い方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Automatic code splitting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041425Z" creationid="hirofumiwakasugi" creationdate="20181119T041425Z">
        <seg>### 自動的なコードの分割</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### CSS</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>### CSS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Custom `&lt;App&gt;`</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161127Z" creationid="Tetsutaro" creationdate="20181204T092613Z">
        <seg>### `&lt;App&gt;`のカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Custom `&lt;Document&gt;`</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161140Z" creationid="Tetsutaro" creationdate="20181204T095713Z">
        <seg>### `&lt;Document&gt;`のカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Custom error handling</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161056Z" creationid="Tetsutaro" creationdate="20181204T161056Z">
        <seg>### エラーハンドリングのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Custom server and routing</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062818Z" creationid="hirofumiwakasugi" creationdate="20181220T062818Z">
        <seg>### カスタムサーバーとルーティング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Fetching data and component lifecycle</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074853Z" creationid="hirofumiwakasugi" creationdate="20181119T074530Z">
        <seg>### データのフェッチとコンポーネントのライフサイクル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Populating `&lt;head&gt;`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074201Z" creationid="hirofumiwakasugi" creationdate="20181119T074117Z">
        <seg>### `&lt;head&gt;` への挿入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Reusing the built-in error page</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161540Z" creationid="Tetsutaro" creationdate="20181204T161540Z">
        <seg>### 組み込みのエラーページを再利用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Routing</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050819Z" creationid="hirofumiwakasugi" creationdate="20181121T050819Z">
        <seg>### Routing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Setup</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041408Z" creationid="hirofumiwakasugi" creationdate="20181119T041408Z">
        <seg>### セットアップ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Static file serving (e.g.: images)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043543Z" creationid="hirofumiwakasugi" creationdate="20181119T043543Z">
        <seg>### 静的ファイル (例: 画像) のサーブ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#### Built-in CSS support</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041430Z" creationid="hirofumiwakasugi" creationdate="20181119T041430Z">
        <seg>#### 組み込みの CSS サポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#### CSS-in-JS</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181206T020955Z" creationid="hirofumiwakasugi" creationdate="20181206T020955Z">
        <seg>#### CSS-in-JS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#### Importing CSS / Sass / Less / Stylus files</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043336Z" creationid="hirofumiwakasugi" creationdate="20181119T043336Z">
        <seg>#### CSS / Sass / Less / Stylus ファイルのインポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#### With `&lt;Link&gt;`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103044Z" creationid="hirofumiwakasugi" creationdate="20181121T103044Z">
        <seg>#### With `&lt;Link&gt;`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>##### Forcing the Link to expose `href` to its child</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T110727Z" creationid="hirofumiwakasugi" creationdate="20181121T110727Z">
        <seg>##### Forcing the Link to expose `href` to its child</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>##### With URL object</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T091905Z" creationid="Tetsutaro" creationdate="20181204T091905Z">
        <seg>##### URLオブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050620Z" creationid="hirofumiwakasugi" creationdate="20181121T050620Z">
        <seg>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- Automatic transpilation and bundling (with webpack and babel)
- Hot code reloading
- Server rendering and indexing of `./pages`
- Static file serving.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041424Z" creationid="hirofumiwakasugi" creationdate="20181119T041424Z">
        <seg>- 完全自動の (webpack と babel を利用した) トランスパイルとビルド
- コードのホットリローディング
- `./pages` 配下のファイルの構造化とサーバーサイドレンダリング
- 静的ファイルの配布</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- Is rendered on the server side
- Is used to change the initial server side rendered document markup
- Commonly used to implement server side rendering for css-in-js libraries like [styled-components](./examples/with-styled-components), [glamorous](./examples/with-glamorous) or [emotion](with-emotion).</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095831Z" creationid="Tetsutaro" creationdate="20181204T095808Z">
        <seg>- サーバーサイドでレンダリングされる
- 最初のサーバーサイドでレンダリングされる文書マークアップの内容を変更する
- CSS-in-JSライブラリのためのサーバーサイドレンダリングの実行。CSS-in-JSライブラリとは[styled-components](./examples/with-styled-components), [glamorous](./examples/with-glamorous)&gt;や[emotion](with-emotion)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- Persisting layout between page changes
- Keeping state when navigating pages
- Custom error handling using `componentDidCatch`
- Inject additional data into pages (for example by processing GraphQL queries)</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095634Z" creationid="Tetsutaro" creationdate="20181204T095634Z">
        <seg>- ページ移動間の固定レイアウト
- ページ移動する際にステートを保持
- `componentDidCatch`を使用したカスタムエラーハンドリング
- ページに追加のデータを注入（例えばGraphQLクエリを使用することによって）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- [@zeit/next-css](https://github.com/zeit/next-plugins/tree/master/packages/next-css)
- [@zeit/next-sass](https://github.com/zeit/next-plugins/tree/master/packages/next-sass)
- [@zeit/next-less](https://github.com/zeit/next-plugins/tree/master/packages/next-less)
- [@zeit/next-stylus](https://github.com/zeit/next-plugins/tree/master/packages/next-stylus)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050610Z" creationid="hirofumiwakasugi" creationdate="20181121T050610Z">
        <seg>- [@zeit/next-css](https://github.com/zeit/next-plugins/tree/master/packages/next-css)
- [@zeit/next-sass](https://github.com/zeit/next-plugins/tree/master/packages/next-sass)
- [@zeit/next-less](https://github.com/zeit/next-plugins/tree/master/packages/next-less)
- [@zeit/next-stylus](https://github.com/zeit/next-plugins/tree/master/packages/next-stylus)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `pathname` - path section of URL
- `query` - query string section of URL parsed as an object
- `asPath` - `String` of the actual path (including the query) shows in the browser
- `req` - HTTP request object (server only)
- `res` - HTTP response object (server only)
- `jsonPageRes` - [Fetch Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object (client only)
- `err` - Error object if any error is encountered during the rendering</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103239Z" creationid="hirofumiwakasugi" creationdate="20181121T050817Z">
        <seg>- `pathname` - URL のパス部分
- `query` - オブジェクトとしてパースされたURLのクエリストリング部分
- `asPath` - ブラウザに表示される実際のパスの `文字列` (クエリ部分含む)
- `req` - HTTP リクエストオブジェクト (サーバーのみ)
- `res` - HTTP レスポンスオブジェクト (サーバーのみ)
- `jsonPageRes` - [Fetch のレスポンス](https://developer.mozilla.org/en-US/docs/Web/API/Response)オブジェクト (クライアントのみ)
- `err` - エラーオブジェクト (もしレンダリング中にエラーが発生した場合)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `renderPage` (`Function`) a callback that executes the actual React rendering logic (synchronously).</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T100033Z" creationid="Tetsutaro" creationdate="20181204T100033Z">
        <seg>- `renderPage` (`Function`)は実際のReactのレンダリングロジック（同期的）を実行するコールバックです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Be sure to pass `true` as the second argument to `url.parse`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063022Z" creationid="hirofumiwakasugi" creationdate="20181220T063022Z">
        <seg>// Be sure to pass `true` as the second argument to `url.parse`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Make sure the syntax and sources this file requires are compatible with the current node version you are running
// See https://github.com/zeit/next.js/issues/1245 for discussions on Universal Webpack or universal Babel
const { createServer } = require('http')
const { parse } = require('url')
const next = require('next')</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063020Z" creationid="hirofumiwakasugi" creationdate="20181220T063020Z">
        <seg>// Make sure the syntax and sources this file requires are compatible with the current node version you are running
// See https://github.com/zeit/next.js/issues/1245 for discussions on Universal Webpack or universal Babel
const { createServer } = require('http')
const { parse } = require('url')
const next = require('next')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// This tells it to parse the query portion of the URL.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063022Z" creationid="hirofumiwakasugi" creationdate="20181220T063022Z">
        <seg>// This tells it to parse the query portion of the URL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181204T103630Z" creationid="hirofumiwakasugi" creationdate="20181204T103630Z">
        <seg>1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>404 or 500 errors are handled both client and server side by a default component `error.js`.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161329Z" creationid="Tetsutaro" creationdate="20181204T161329Z">
        <seg>ステータスコードが404もしくは500のエラーは、`error.js`というデフォルトのコンポーネントによってクライアントとサーバーサイドの両方でハンドリングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/Head&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074328Z" creationid="hirofumiwakasugi" creationdate="20181119T074328Z">
        <seg>&lt;/Head&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/Link&gt;{' '}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103414Z" creationid="hirofumiwakasugi" creationdate="20181121T103414Z">
        <seg>&lt;/Link&gt;{' '}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/div&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050620Z" creationid="hirofumiwakasugi" creationdate="20181121T050620Z">
        <seg>&lt;/div&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/div&gt;
)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041438Z" creationid="hirofumiwakasugi" creationdate="20181119T041438Z">
        <seg>&lt;/div&gt;
)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/pre&gt;
)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>&lt;/pre&gt;
)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/summary&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050606Z" creationid="hirofumiwakasugi" creationdate="20181121T050606Z">
        <seg>&lt;/summary&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074240Z" creationid="hirofumiwakasugi" creationdate="20181119T074240Z">
        <seg>&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;Head&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074325Z" creationid="hirofumiwakasugi" creationdate="20181119T074325Z">
        <seg>&lt;Head&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;Link href="/about"&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103413Z" creationid="hirofumiwakasugi" creationdate="20181121T103413Z">
        <seg>&lt;Link href="/about"&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a&gt;here&lt;/a&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103413Z" creationid="hirofumiwakasugi" creationdate="20181121T103413Z">
        <seg>&lt;a&gt;here&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b&gt;Examples&lt;/b&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042039Z" creationid="hirofumiwakasugi" creationdate="20181119T042039Z">
        <seg>&lt;b&gt;例&lt;/b&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;br/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095826Z" creationid="hirofumiwakasugi" creationdate="20181119T095826Z">
        <seg>&lt;br/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041430Z" creationid="hirofumiwakasugi" creationdate="20181119T041430Z">
        <seg>&lt;details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;div&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041433Z" creationid="hirofumiwakasugi" creationdate="20181119T041433Z">
        <seg>&lt;div&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server"&gt;Basic custom server&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062844Z" creationid="hirofumiwakasugi" creationdate="20181220T062844Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server"&gt;基本的なカスタムサーバー&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server-express"&gt;Express integration&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062849Z" creationid="hirofumiwakasugi" creationdate="20181220T062849Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server-express"&gt;Expressとの統合&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server-hapi"&gt;Hapi integration&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062857Z" creationid="hirofumiwakasugi" creationdate="20181220T062857Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server-hapi"&gt;Hapiとの統合&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server-koa"&gt;Koa integration&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062909Z" creationid="hirofumiwakasugi" creationdate="20181220T062909Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/custom-server-koa"&gt;Koaとの統合&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/head-elements"&gt;Head elements&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050613Z" creationid="hirofumiwakasugi" creationdate="20181121T050613Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/head-elements"&gt;Head elements&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/hello-world"&gt;Hello World&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103308Z" creationid="hirofumiwakasugi" creationdate="20181121T103308Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/hello-world"&gt;Hello World&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/layout-component"&gt;Layout component&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074239Z" creationid="hirofumiwakasugi" creationdate="20181119T074239Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/layout-component"&gt;Layout component&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/parameterized-routing"&gt;Parameterized routing&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062916Z" creationid="hirofumiwakasugi" creationdate="20181220T062916Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/parameterized-routing"&gt;パラメータ化されたルーティング&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/ssr-caching"&gt;SSR caching&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062924Z" creationid="hirofumiwakasugi" creationdate="20181220T062924Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/ssr-caching"&gt;SSRキャッシング&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/with-app-layout"&gt;Using `_app.js` for layout&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T092746Z" creationid="Tetsutaro" creationdate="20181204T092746Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/with-app-layout"&gt;レイアウトとして`_app.js`を使用する&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/with-componentdidcatch"&gt;Using `_app.js` to override `componentDidCatch`&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T092636Z" creationid="Tetsutaro" creationdate="20181204T092636Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/with-componentdidcatch"&gt;`componentDidCatch`をオーバーライドするために`_app.js`を使用する&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" /&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074328Z" creationid="hirofumiwakasugi" creationdate="20181119T074328Z">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" /&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074457Z" creationid="hirofumiwakasugi" creationdate="20181119T074457Z">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;meta name="viewport" content="initial-scale=1.2, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074458Z" creationid="hirofumiwakasugi" creationdate="20181119T074458Z">
        <seg>&lt;meta name="viewport" content="initial-scale=1.2, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;p&gt;Hello world!&lt;/p&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074329Z" creationid="hirofumiwakasugi" creationdate="20181119T074329Z">
        <seg>&lt;p&gt;Hello world!&lt;/p&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;p&gt;scoped!&lt;/p&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041433Z" creationid="hirofumiwakasugi" creationdate="20181119T041433Z">
        <seg>&lt;p&gt;scoped!&lt;/p&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;pre&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>&lt;pre&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;style global jsx&gt;{`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041436Z" creationid="hirofumiwakasugi" creationdate="20181119T041436Z">
        <seg>&lt;style global jsx&gt;{`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;style jsx&gt;{`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>&lt;style jsx&gt;{`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;summary&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042028Z" creationid="hirofumiwakasugi" creationdate="20181119T042028Z">
        <seg>&lt;summary&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041431Z" creationid="hirofumiwakasugi" creationdate="20181119T041431Z">
        <seg>&lt;summary&gt;&lt;b&gt;例&lt;/b&gt;&lt;/summary&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;title&gt;My page title&lt;/title&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074327Z" creationid="hirofumiwakasugi" creationdate="20181119T074327Z">
        <seg>&lt;title&gt;My page title&lt;/title&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050612Z" creationid="hirofumiwakasugi" creationdate="20181121T050612Z">
        <seg>&lt;ul&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/basic-css"&gt;Basic css&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103027Z" creationid="hirofumiwakasugi" creationdate="20181121T103027Z">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/basic-css"&gt;Basic css&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/data-fetch"&gt;Data fetch&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074958Z" creationid="hirofumiwakasugi" creationdate="20181119T074958Z">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/data-fetch"&gt;Data fetch&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styled-components"&gt;Styled components custom document&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095741Z" creationid="Tetsutaro" creationdate="20181204T095741Z">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styled-components"&gt;Styled componentsのカスタムdocumentでの設定&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styled-components"&gt;Styled components&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styletron"&gt;Styletron&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamor"&gt;Glamor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamorous"&gt;Glamorous&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-cxs"&gt;Cxs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-aphrodite"&gt;Aphrodite&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-fela"&gt;Fela&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042120Z" creationid="hirofumiwakasugi" creationdate="20181119T042120Z">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styled-components"&gt;Styled components&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styletron"&gt;Styletron&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamor"&gt;Glamor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamorous"&gt;Glamorous&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-cxs"&gt;Cxs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-aphrodite"&gt;Aphrodite&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-fela"&gt;Fela&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; If you are using some server only modules inside `getInitialProps`, make sure to [import them properly](https://arunoda.me/blog/ssr-and-server-only-modules).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T100022Z" creationid="hirofumiwakasugi" creationdate="20181119T100022Z">
        <seg>&gt; もし `getInitialProps` の中でサーバーのみのモジュールを使っている場合、それらを[正しく import](https://arunoda.me/blog/ssr-and-server-only-modules) していないと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; If you have created a custom error page you have to import your own `_error` component instead of `next/error`</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161945Z" creationid="Tetsutaro" creationdate="20181204T161945Z">
        <seg>&gt; もしカスタムエラーページを作ったのならば、`next/error`ではなく、独自の`_error`コンポーネントをインポートしなければいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; Otherwise, it'll slow down your app.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T100047Z" creationid="hirofumiwakasugi" creationdate="20181119T100047Z">
        <seg>&gt; アプリケーションが遅くなってしまうため注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@media (max-width: 600px) {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041435Z" creationid="hirofumiwakasugi" creationdate="20181119T041435Z">
        <seg>@media (max-width: 600px) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After 1 and 2 complete, `pushState` is performed and the new component is rendered</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103822Z" creationid="hirofumiwakasugi" creationdate="20181121T103822Z">
        <seg>1 と 2 が完了したら `pushState` が実行されて新しいコンポーネントがレンダリングされる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After that, the file-system is the main API.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041418Z" creationid="hirofumiwakasugi" creationdate="20181119T041418Z">
        <seg>ファイルシステム自体をメインの API として利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click{' '}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103413Z" creationid="hirofumiwakasugi" creationdate="20181121T103413Z">
        <seg>Click{' '}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Client-side routing behaves exactly like the browser:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103624Z" creationid="hirofumiwakasugi" creationdate="20181121T103624Z">
        <seg>クライアントサイドでのルーティングはブラウザとほぼ同じです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Client-side transitions between routes can be enabled via a `&lt;Link&gt;` component.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103352Z" creationid="hirofumiwakasugi" creationdate="20181121T103352Z">
        <seg>クライアントサイドでのルートの遷移は `&lt;Link&gt;` コンポーネントによって実現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider these two pages:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103411Z" creationid="hirofumiwakasugi" creationdate="20181121T103411Z">
        <seg>以下の2つのページがある場合を考えてみてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a folder called `static` in your project root directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043613Z" creationid="hirofumiwakasugi" creationdate="20181119T043613Z">
        <seg>プロジェクトのルートディレクトリに `static` というディレクトリを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data returned from `getInitialProps` is serialized when server rendering, similar to a `JSON.stringify`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075706Z" creationid="hirofumiwakasugi" creationdate="20181119T075706Z">
        <seg>サーバーサイドレンダリング時には `getInitialProps` の戻り値のデータはシリアライズされます。ちょうど `JSON.stringify` と似た感じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do _not_ add application logic here.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T100232Z" creationid="Tetsutaro" creationdate="20181204T100232Z">
        <seg>アプリケーションロジックをここに追加_しないで_ください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every `.js` file becomes a route that gets automatically processed and rendered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041419Z" creationid="hirofumiwakasugi" creationdate="20181119T041419Z">
        <seg>すべての `.js` ファイルがルーティングとして機能し、それらのファイルは自動的に処理されレンダリングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every `import` you declare gets bundled and served with each page.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041426Z" creationid="hirofumiwakasugi" creationdate="20181119T041426Z">
        <seg>`import` したものはすべて「各ページごとに」バンドルされて配布されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you never include `&lt;html&gt;`, `&lt;body&gt;`, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095853Z" creationid="Tetsutaro" creationdate="20181204T095853Z">
        <seg>例えば、`&lt;html&gt;`, `&lt;body&gt;`などはインクルードする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the initial page load, `getInitialProps` will execute on the server only.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095608Z" creationid="hirofumiwakasugi" creationdate="20181119T095608Z">
        <seg>最初にページが読み込まれるとき、`getInitialProps` はサーバーサイドでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From your code you can then reference those files with `/static/` URLs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043728Z" creationid="hirofumiwakasugi" creationdate="20181119T043728Z">
        <seg>From your code you can then reference those files with `/static/` URLs:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello World {this.props.userAgent}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050620Z" creationid="hirofumiwakasugi" creationdate="20181121T050620Z">
        <seg>Hello World {this.props.userAgent}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello world</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041433Z" creationid="hirofumiwakasugi" creationdate="20181119T041433Z">
        <seg>Hello world</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, sometimes, you’ll want to pass an `&lt;a&gt;` tag inside of a wrapper and the `Link` won’t recognize it as a *hyperlink*, and, consequently, won’t transfer its `href` to the child.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T110729Z" creationid="hirofumiwakasugi" creationdate="20181121T110729Z">
        <seg>However, sometimes, you’ll want to pass an `&lt;a&gt;` tag inside of a wrapper and the `Link` won’t recognize it as a *hyperlink*, and, consequently, won’t transfer its `href` to the child.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an error occurs, `_error.js` is rendered
3.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103752Z" creationid="hirofumiwakasugi" creationdate="20181121T103729Z">
        <seg>エラーが発生した場合は`_error.js` がレンダリングされる
3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If child is an `&lt;a&gt;` tag and doesn't have a href attribute we specify it so that the repetition is not needed by the user.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T110757Z" creationid="hirofumiwakasugi" creationdate="20181121T110757Z">
        <seg>If child is an `&lt;a&gt;` tag and doesn't have a href attribute we specify it so that the repetition is not needed by the user.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it defines `getInitialProps`, data is fetched.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103732Z" creationid="hirofumiwakasugi" creationdate="20181121T103716Z">
        <seg>もし `getInitialProps` が定義されていればデータを取得する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need shared components in all your pages (like a menu or a toolbar), take a look at the `App` component instead.__</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T100236Z" creationid="Tetsutaro" creationdate="20181204T100236Z">
        <seg>もし、すべてのページで共通のコンポーネ
ント(メニューやツールバーのような)が必要なら、代わりに`App`コンポーネントを使用して下さい。__</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to render the built-in error page you can by using `next/error`:</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161637Z" creationid="Tetsutaro" creationdate="20181204T161637Z">
        <seg>組み込みのエラーページをレンダリングしたいのならば、`next/error`を使用すれば可能です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you wish to override it, define a `_error.js` in the pages folder:</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T161449Z" creationid="Tetsutaro" creationdate="20181204T161449Z">
        <seg>もしデフォルトのエラーコンポーネントをオーバーライドしたいのなら、`_error.js`をpagesフォルダーの中に定義して下さい:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case only the second `&lt;meta name="viewport" /&gt;` is rendered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074524Z" creationid="hirofumiwakasugi" creationdate="20181119T074458Z">
        <seg>例えば上記の例では、2番目の `&lt;meta name="viewport" /&gt;` のみがレンダリングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Install it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041409Z" creationid="hirofumiwakasugi" creationdate="20181119T041409Z">
        <seg>以下を実行してインストールします:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can asynchronously fetch anything that resolves to a JavaScript plain `Object`, which populates `props`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075537Z" creationid="hirofumiwakasugi" creationdate="20181119T075537Z">
        <seg>このメソッドは、JavaScript のプレーンな `Object` として扱えるものであれば何でも非同期的に取得して、それを `props` に含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's possible to use any existing CSS-in-JS solution.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042146Z" creationid="hirofumiwakasugi" creationdate="20181119T042146Z">
        <seg>既存のどんな CSS-in-JS も利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's possible, however, to start a server 100% programmatically in order to customize routes, use route patterns, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062941Z" creationid="hirofumiwakasugi" creationdate="20181220T062941Z">
        <seg>しかし、ルーティングをカスタマイズするためやルーティングパターンを使うためなどにサーバーを100%プログラムで起動することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's useful to decorate this function in order to support server-rendering wrappers like Aphrodite's [`renderStatic`](https://github.com/Khan/aphrodite#server-side-rendering)</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T100151Z" creationid="Tetsutaro" creationdate="20181204T100151Z">
        <seg>Aphroditeの[`renderStatic`](https://github.com/Khan/aphrodite#server-side-rendering)のようなサーバーレンダリングのラッパーをサポートするためには、この関数を装飾することが便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the returned object from `getInitialProps` is a plain `Object` and not using `Date`, `Map` or `Set`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075815Z" creationid="hirofumiwakasugi" creationdate="20181119T075815Z">
        <seg>`getInitialProps` が返すオブジェクトは必ず「プレーンな `Object`」でなければならず、`Date`,/ `Map` / `Set` は使用できないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next stars: {stars}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050621Z" creationid="hirofumiwakasugi" creationdate="20181121T050621Z">
        <seg>Next stars: {stars}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next.js uses the `App` component to initialize pages.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095512Z" creationid="Tetsutaro" creationdate="20181204T095512Z">
        <seg>Next.jsはページを初期化するために`App`コンポーネントを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that to load data when the page loads, we use `getInitialProps` which is an [`async`](https://zeit.co/blog/async-and-await) static method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075422Z" creationid="hirofumiwakasugi" creationdate="20181119T075422Z">
        <seg>ページが読み込まれるときのデータを設定するために [`async`](https://zeit.co/blog/async-and-await) で static な `getInitialProps` メソッドを使っていることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only in `pages`._</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095837Z" creationid="hirofumiwakasugi" creationdate="20181119T095824Z">
        <seg>利用できるのは `pages` に限られます。_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Page.getInitialProps = async ({ req }) =&gt; {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050623Z" creationid="hirofumiwakasugi" creationdate="20181121T050623Z">
        <seg>Page.getInitialProps = async ({ req }) =&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pages in `Next.js` skip the definition of the surrounding document's markup.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095845Z" creationid="Tetsutaro" creationdate="20181204T095845Z">
        <seg>`Next.js`のページでは、文書のマークアップまわりの定義はスキップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please see the [styled-jsx documentation](https://www.npmjs.com/package/styled-jsx) for more examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041438Z" creationid="hirofumiwakasugi" creationdate="20181119T041438Z">
        <seg>[styled-jsx のドキュメント](https://www.npmjs.com/package/styled-jsx) により多くの例が書かれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Populate `./pages/index.js` inside your project:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041420Z" creationid="hirofumiwakasugi" creationdate="20181119T041420Z">
        <seg>`./pages/index.js` ファイルをプロジェクトに追加してみましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041423Z" creationid="hirofumiwakasugi" creationdate="20181119T041423Z">
        <seg>これだけで以下が実現できています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That means pages never load unnecessary code!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041426Z" creationid="hirofumiwakasugi" creationdate="20181119T041426Z">
        <seg>これはつまり、ページに必要のないコードが無駄に読み込まれることがないということを意味しています！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `ctx` object is equivalent to the one received in all [`getInitialProps`](#fetching-data-and-component-lifecycle) hooks, with one addition:</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T100011Z" creationid="Tetsutaro" creationdate="20181204T100011Z">
        <seg>`ctx`オブジェクトは、すべての[`getInitialProps`](#fetching-data-and-component-lifecycle)フックで受け取るオブジェクトと同等です。さらに加えて:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The aim is to support "shadow CSS" similar to Web Components, which unfortunately [do not support server-rendering and are JS-only](https://github.com/w3c/webcomponents/issues/71).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041432Z" creationid="hirofumiwakasugi" creationdate="20181119T041432Z">
        <seg>これは Web Components の「Shadow CSS」に似た機能を提供することを目的としています (残念ながら Shadow CSS は[サーバーサイドレンダリングで利用することができません](https://github.com/w3c/webcomponents/issues/71))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The component is fetched
2.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103652Z" creationid="hirofumiwakasugi" creationdate="20181121T103652Z">
        <seg>コンポーネントを取得する
2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name is required and is the only directory that Next.js uses for serving static assets._</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074117Z" creationid="hirofumiwakasugi" creationdate="20181119T074117Z">
        <seg>ディレクトリはこの名前である必要があり、Next.js が静的なアセットをサーブするための唯一のディレクトリとなります。_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simplest one is inline styles:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042209Z" creationid="hirofumiwakasugi" creationdate="20181119T042209Z">
        <seg>一番シンプルなのはインラインで記述するものでしょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This example makes `/a` resolve to `./pages/b`, and `/b` resolve to `./pages/a`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063008Z" creationid="hirofumiwakasugi" creationdate="20181220T063008Z">
        <seg>この例では  `/a` を `./pages/b`に対応させ,  `/b` を `./pages/a`に対応させるようにしております:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid duplicate tags in your `&lt;head&gt;` you can use the `key` property, which will make sure the tag is only rendered once:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074456Z" creationid="hirofumiwakasugi" creationdate="20181119T074456Z">
        <seg>`&lt;head&gt;` の中で要素が重複するのを避けるために `key` プロパティを使うことができます。これによって、あるタグが一度だけレンダリングされることを保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To inject the `pathname`, `query` or `asPath` in your component, you can use [withRouter](#using-a-higher-order-component).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103917Z" creationid="hirofumiwakasugi" creationdate="20181121T103917Z">
        <seg>コンポーネントの内部で `pathname` / `query` / `asPath` を弄りたいときは [withRouter](#using-a-higher-order-component) を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To override that default behavior, you must create a file at `./pages/_document.js`, where you can extend the `Document` class:</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095914Z" creationid="Tetsutaro" creationdate="20181204T095914Z">
        <seg>通常の挙動をオーバーライドするには、`./pages/_document.js`にファイルを作成しなくてはいけません。このファイルでは`Document`クラスを以下のように拡張できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To override, create the `./pages/_app.js` file and override the App class as shown below:</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095641Z" creationid="Tetsutaro" creationdate="20181204T095641Z">
        <seg>オーバーライドするには`./pages/_app.js`ファイルを作成し、以下のようにAppクラスをオーバーライドします:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see how simple this is, check out the [sample app - nextgram](https://github.com/zeit/nextgram)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041425Z" creationid="hirofumiwakasugi" creationdate="20181119T041425Z">
        <seg>実際にこれがどれだけシンプルにできるかは、[nextgram というサンプルアプリケーション](https://github.com/zeit/nextgram)をチェックしてみるとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To support importing `.css`, `.scss`, `.less` or `.styl` files you can use these modules, which configure sensible defaults for server rendered applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043515Z" creationid="hirofumiwakasugi" creationdate="20181119T043515Z">
        <seg>`.css` / `.scss` / `.less` / `.styl` ファイルをインポートするためには、サーバーサイドでリンダリングされるアプリケーション用の設定が施された以下のモジュールを利用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use another port, you can run `npm run dev -- -p &lt;your port here&gt;`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041422Z" creationid="hirofumiwakasugi" creationdate="20181119T041422Z">
        <seg>別のポートに変更したい場合は `npm run dev -- -p &lt;ポート番号&gt;` として起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use more sophisticated CSS-in-JS solutions, you typically have to implement style flushing for server-side rendering.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043230Z" creationid="hirofumiwakasugi" creationdate="20181119T043230Z">
        <seg>より洗練された CSS-in-JS のソリューションを使いたい場合には、サーバーサイドレンダリングでスタイルを設定するための実装を追加する必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically you start your next server with `next start`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062932Z" creationid="hirofumiwakasugi" creationdate="20181220T062932Z">
        <seg>一般的に`next server`でサーバーを立てます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We bundle [styled-jsx](https://github.com/zeit/styled-jsx) to provide support for isolated scoped CSS.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041432Z" creationid="hirofumiwakasugi" creationdate="20181119T041432Z">
        <seg>Next.js には [styled-jsx](https://github.com/zeit/styled-jsx) の機能が同梱されており、スコープを分離した CSS の適用が可能になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We enable this by allowing you to define your own [custom `&lt;Document&gt;`](#user-content-custom-document) component that wraps each page.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043311Z" creationid="hirofumiwakasugi" creationdate="20181119T043311Z">
        <seg>これは、独自の[カスタム `&lt;Document&gt;`](#user-content-custom-document) コンポーネントを定義することで実現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We expose a built-in component for appending elements to the `&lt;head&gt;` of the page.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074324Z" creationid="hirofumiwakasugi" creationdate="20181119T074324Z">
        <seg>ページの `&lt;head&gt;` に要素を追加するために組み込みのコンポーネントを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using a custom server with a server file, for example called `server.js`, make sure you update the scripts key in `package.json` to:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T062956Z" creationid="hirofumiwakasugi" creationdate="20181220T062952Z">
        <seg>例えば`server.js`と呼ばれるサーバーのためのファイルでカスタムなサーバーを使おうとする時は, `package.json`内のscriptsのkeyを下記のように上書きしていることを確認してください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need state, lifecycle hooks or **initial data population** you can export a `React.Component` (instead of a stateless function, like shown above):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075255Z" creationid="hirofumiwakasugi" creationdate="20181119T075251Z">
        <seg>状態、ライフサイクルフック、そして **初期データの設定** を行う必要がある場合、(これまで紹介してきたステートレスな関数ではなく) `React.Component` を export することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Which allows you to do amazing things like:</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095607Z" creationid="Tetsutaro" creationdate="20181204T095607Z">
        <seg>それによってこのような素晴らしい事が可能になります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also define the `getInitialProps` lifecycle method for stateless components:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T100124Z" creationid="hirofumiwakasugi" creationdate="20181119T100124Z">
        <seg>ステートレスなコンポーネントでも `getInitialProps` ライフサイクルメソッドを定義することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override it and control the page initialization.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095526Z" creationid="Tetsutaro" creationdate="20181204T095526Z">
        <seg>`App`コンポーネントをオーバーライドし、ページの初期化をコントロールすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[styled-jsx](https://github.com/zeit/styled-jsx) is included with Next.js by default.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095835Z" creationid="Tetsutaro" creationdate="20181204T095835Z">
        <seg>そしてNext.jsでデフォルトで使用される[styled-jsx](https://github.com/zeit/styled-jsx)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_Note: Don't name the `static` directory anything else.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074021Z" creationid="hirofumiwakasugi" creationdate="20181119T074021Z">
        <seg>_注意: ディレクトリ名は必ず `static` としてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_Note: The contents of `&lt;head&gt;` get cleared upon unmounting the component, so make sure each page completely defines what it needs in `&lt;head&gt;`, without making assumptions about what other pages added_</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074833Z" creationid="hirofumiwakasugi" creationdate="20181119T074505Z">
        <seg>_注意: `&lt;head&gt;` の内容はコンポーネントがアンマウントされる際に消去されるため、各ページは `&lt;head&gt;` で必要とするものをすべて定義しておく必要があります。他のページで追加しているものに依存することはできません。_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_Note: `getInitialProps` can **not** be used in children components.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095755Z" creationid="hirofumiwakasugi" creationdate="20181119T095755Z">
        <seg>_注意: `getInitialProps` を子コンポーネントで利用することは**できません**。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Note: React-components outside of `&lt;Main /&gt;` will not be initialised by the browser.</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T100220Z" creationid="Tetsutaro" creationdate="20181204T100220Z">
        <seg>__注意: Reactコンポーネントの外にある`&lt;Main /&gt;`は、ブラウザによって初期化されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Note: use [`&lt;Link prefetch&gt;`](#prefetching-pages) for maximum performance, to link and prefetch in the background at the same time__</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103601Z" creationid="hirofumiwakasugi" creationdate="20181121T103601Z">
        <seg>__注意: 最大限にパフォーマンスを発揮したければ [`&lt;Link prefetch&gt;`](#prefetching-pages) の利用を検討してください。これによって、リンクとバックグラウンドでのプリフェッチを同時に同時に実現することが可能になります__</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`./static/` is mapped to `/static/` (given you [create a `./static/` directory](#static-file-serving-eg-images) inside your project)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041424Z" creationid="hirofumiwakasugi" creationdate="20181119T041424Z">
        <seg>`./static/` は `/static/` にマッピングされます (プロジェクトに [`./static/` ディレクトリを作成](#static-file-serving-eg-images)する必要があります。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
npm install --save next react react-dom
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041410Z" creationid="hirofumiwakasugi" creationdate="20181119T041410Z">
        <seg>```bash
npm install --save next react react-dom
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```js
// This file doesn't go through babel or webpack transformation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063020Z" creationid="hirofumiwakasugi" creationdate="20181220T063020Z">
        <seg>```js
// This file doesn't go through babel or webpack transformation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```json
{</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041411Z" creationid="hirofumiwakasugi" creationdate="20181119T041411Z">
        <seg>```json
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
// _document is only rendered on the server side and not on the client side
// Event handlers like onClick can't be added to this file</seg>
      </tuv>
      <tuv lang="JA" changeid="Tetsutaro" changedate="20181204T095928Z" creationid="Tetsutaro" creationdate="20181204T095928Z">
        <seg>```jsx
// _documentはサーバーサイドのみでレンダリングされ、クライアントサイドでは使われません
// onClickのようなイベントハンドラはこのファイルには書けません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
// pages/about.js
export default () =&gt; &lt;p&gt;Welcome to About!&lt;/p&gt;
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103420Z" creationid="hirofumiwakasugi" creationdate="20181121T103420Z">
        <seg>```jsx
// pages/about.js
export default () =&gt; &lt;p&gt;Welcome to About!&lt;/p&gt;
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
// pages/index.js
import Link from 'next/link'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103412Z" creationid="hirofumiwakasugi" creationdate="20181121T103412Z">
        <seg>```jsx
// pages/index.js
import Link from 'next/link'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
const Page = ({ stars }) =&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T102046Z" creationid="hirofumiwakasugi" creationdate="20181119T102046Z">
        <seg>```jsx
const Page = ({ stars }) =&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
export default () =&gt; (</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041432Z" creationid="hirofumiwakasugi" creationdate="20181119T041432Z">
        <seg>```jsx
export default () =&gt; (</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
export default () =&gt; &lt;div&gt;Welcome to next.js!&lt;/div&gt;
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041421Z" creationid="hirofumiwakasugi" creationdate="20181119T041421Z">
        <seg>```jsx
export default () =&gt; &lt;div&gt;Welcome to next.js!&lt;/div&gt;
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
export default () =&gt; &lt;img src="/static/my-image.png" alt="my image" /&gt;
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T073907Z" creationid="hirofumiwakasugi" creationdate="20181119T073907Z">
        <seg>```jsx
export default () =&gt; &lt;img src="/static/my-image.png" alt="my image" /&gt;
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
export default () =&gt; &lt;p style={{ color: 'red' }}&gt;hi there&lt;/p&gt;
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050608Z" creationid="hirofumiwakasugi" creationdate="20181121T050608Z">
        <seg>```jsx
export default () =&gt; &lt;p style={{ color: 'red' }}&gt;hi there&lt;/p&gt;
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
import Head from 'next/head'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074325Z" creationid="hirofumiwakasugi" creationdate="20181119T074325Z">
        <seg>```jsx
import Head from 'next/head'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
import React from 'react'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075256Z" creationid="hirofumiwakasugi" creationdate="20181119T075256Z">
        <seg>```jsx
import React from 'react'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
import cowsay from 'cowsay-browser'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041427Z" creationid="hirofumiwakasugi" creationdate="20181119T041427Z">
        <seg>```jsx
import cowsay from 'cowsay-browser'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`getInitialProps` receives a context object with the following properties:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050715Z" creationid="hirofumiwakasugi" creationdate="20181121T050715Z">
        <seg>`getInitialProps` は context オブジェクトを受け取り、それは以下のプロパティを含みます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`getInitialProps` will only be executed on the client when navigating to a different route via the `Link` component or using the routing APIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095712Z" creationid="hirofumiwakasugi" creationdate="20181119T095712Z">
        <seg>`getInitialProps` がクライアントサイドで実行されるのは、`Link` コンポーネントかルーティング API を用いて別のルートに移動した場合のみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`}&lt;/style&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041436Z" creationid="hirofumiwakasugi" creationdate="20181119T041436Z">
        <seg>`}&lt;/style&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and add a script to your package.json like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041411Z" creationid="hirofumiwakasugi" creationdate="20181119T041411Z">
        <seg>次に、package.json にスクリプトを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and then just run `npm run dev` and go to `http://localhost:3000`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041422Z" creationid="hirofumiwakasugi" creationdate="20181119T041422Z">
        <seg>追加したら、`npm run dev` を実行し、`http://localhost:3000` を開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>app.prepare().then(() =&gt; {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063021Z" creationid="hirofumiwakasugi" creationdate="20181220T063021Z">
        <seg>app.prepare().then(() =&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>app.render(req, res, '/a', query)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063024Z" creationid="hirofumiwakasugi" creationdate="20181220T063024Z">
        <seg>app.render(req, res, '/a', query)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>app.render(req, res, '/b', query)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063023Z" creationid="hirofumiwakasugi" creationdate="20181220T063023Z">
        <seg>app.render(req, res, '/b', query)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>background: black;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041437Z" creationid="hirofumiwakasugi" creationdate="20181119T041437Z">
        <seg>background: black;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>background: blue;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041436Z" creationid="hirofumiwakasugi" creationdate="20181119T041436Z">
        <seg>background: blue;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>background: red;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041435Z" creationid="hirofumiwakasugi" creationdate="20181119T041435Z">
        <seg>background: red;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>body {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041437Z" creationid="hirofumiwakasugi" creationdate="20181119T041437Z">
        <seg>body {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>color: blue;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>color: blue;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>console.log('&gt; Ready on http://localhost:3000')</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063026Z" creationid="hirofumiwakasugi" creationdate="20181220T063026Z">
        <seg>console.log('&gt; Ready on http://localhost:3000')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063021Z" creationid="hirofumiwakasugi" creationdate="20181220T063021Z">
        <seg>const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const json = await res.json()</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050624Z" creationid="hirofumiwakasugi" creationdate="20181121T050624Z">
        <seg>const json = await res.json()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const parsedUrl = parse(req.url, true)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063022Z" creationid="hirofumiwakasugi" creationdate="20181220T063022Z">
        <seg>const parsedUrl = parse(req.url, true)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const res = await fetch('https://api.github.com/repos/zeit/next.js')</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050624Z" creationid="hirofumiwakasugi" creationdate="20181121T050624Z">
        <seg>const res = await fetch('https://api.github.com/repos/zeit/next.js')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const userAgent = req ?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050616Z" creationid="hirofumiwakasugi" creationdate="20181121T050616Z">
        <seg>const userAgent = req ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const { pathname, query } = parsedUrl</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063022Z" creationid="hirofumiwakasugi" creationdate="20181220T063022Z">
        <seg>const { pathname, query } = parsedUrl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>createServer((req, res) =&gt; {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063021Z" creationid="hirofumiwakasugi" creationdate="20181220T063021Z">
        <seg>createServer((req, res) =&gt; {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>div {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041435Z" creationid="hirofumiwakasugi" creationdate="20181119T041435Z">
        <seg>div {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>export default () =&gt; (</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041427Z" creationid="hirofumiwakasugi" creationdate="20181119T041427Z">
        <seg>export default () =&gt; (</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>export default Page
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050626Z" creationid="hirofumiwakasugi" creationdate="20181121T050626Z">
        <seg>export default Page
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>export default class extends React.Component {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075257Z" creationid="hirofumiwakasugi" creationdate="20181119T075257Z">
        <seg>export default class extends React.Component {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>handle(req, res, parsedUrl)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063025Z" creationid="hirofumiwakasugi" creationdate="20181220T063025Z">
        <seg>handle(req, res, parsedUrl)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if (err) throw err</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063026Z" creationid="hirofumiwakasugi" creationdate="20181220T063026Z">
        <seg>if (err) throw err</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if (pathname === '/a') {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063023Z" creationid="hirofumiwakasugi" creationdate="20181220T063023Z">
        <seg>if (pathname === '/a') {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>p {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>render() {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050618Z" creationid="hirofumiwakasugi" creationdate="20181121T050618Z">
        <seg>render() {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>req.headers['user-agent'] : navigator.userAgent</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050617Z" creationid="hirofumiwakasugi" creationdate="20181121T050617Z">
        <seg>req.headers['user-agent'] : navigator.userAgent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return (</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050618Z" creationid="hirofumiwakasugi" creationdate="20181121T050618Z">
        <seg>return (</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return { stars: json.stargazers_count }
}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050625Z" creationid="hirofumiwakasugi" creationdate="20181121T050625Z">
        <seg>return { stars: json.stargazers_count }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return { userAgent }</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050617Z" creationid="hirofumiwakasugi" creationdate="20181121T050617Z">
        <seg>return { userAgent }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>static async getInitialProps({ req }) {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T050615Z" creationid="hirofumiwakasugi" creationdate="20181121T050615Z">
        <seg>static async getInitialProps({ req }) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>to read more</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181121T103420Z" creationid="hirofumiwakasugi" creationdate="20181121T103420Z">
        <seg>to read more</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{cowsay.say({ text: 'hi there!' })}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>{cowsay.say({ text: 'hi there!' })}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}
}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041414Z" creationid="hirofumiwakasugi" creationdate="20181119T041414Z">
        <seg>}
}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>} else if (pathname === '/b') {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063023Z" creationid="hirofumiwakasugi" creationdate="20181220T063023Z">
        <seg>} else if (pathname === '/b') {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>} else {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063024Z" creationid="hirofumiwakasugi" creationdate="20181220T063024Z">
        <seg>} else {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>})
})
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063042Z" creationid="hirofumiwakasugi" creationdate="20181220T063042Z">
        <seg>})
})
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}).listen(3000, err =&gt; {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181220T063025Z" creationid="hirofumiwakasugi" creationdate="20181220T063025Z">
        <seg>}).listen(3000, err =&gt; {</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
