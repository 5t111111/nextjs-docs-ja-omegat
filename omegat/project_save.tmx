<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.1.5_3_10490" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>"build": "next build",</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041413Z" creationid="hirofumiwakasugi" creationdate="20181119T041413Z">
        <seg>"build": "next build",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"dev": "next",</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041412Z" creationid="hirofumiwakasugi" creationdate="20181119T041412Z">
        <seg>"dev": "next",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"scripts": {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041412Z" creationid="hirofumiwakasugi" creationdate="20181119T041412Z">
        <seg>"scripts": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"start": "next start"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041414Z" creationid="hirofumiwakasugi" creationdate="20181119T041414Z">
        <seg>"start": "next start"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## How to use</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041407Z" creationid="hirofumiwakasugi" creationdate="20181119T041238Z">
        <seg>## 使い方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Automatic code splitting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041425Z" creationid="hirofumiwakasugi" creationdate="20181119T041425Z">
        <seg>### 自動的なコードの分割</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### CSS</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>### CSS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Fetching data and component lifecycle</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074853Z" creationid="hirofumiwakasugi" creationdate="20181119T074530Z">
        <seg>### データのフェッチとコンポーネントのライフサイクル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Populating `&lt;head&gt;`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074201Z" creationid="hirofumiwakasugi" creationdate="20181119T074117Z">
        <seg>### `&lt;head&gt;` への挿入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Setup</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041408Z" creationid="hirofumiwakasugi" creationdate="20181119T041408Z">
        <seg>### セットアップ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Static file serving (e.g.: images)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043543Z" creationid="hirofumiwakasugi" creationdate="20181119T043543Z">
        <seg>### 静的ファイル (例: 画像) のサーブ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#### Built-in CSS support</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041430Z" creationid="hirofumiwakasugi" creationdate="20181119T041430Z">
        <seg>#### 組み込みの CSS サポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#### CSS-in-JS</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041443Z" creationid="hirofumiwakasugi" creationdate="20181119T041443Z">
        <seg>#### CSS-in-JS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#### Importing CSS / Sass / Less / Stylus files</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043336Z" creationid="hirofumiwakasugi" creationdate="20181119T043336Z">
        <seg>#### CSS / Sass / Less / Stylus ファイルのインポート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- Automatic transpilation and bundling (with webpack and babel)
- Hot code reloading
- Server rendering and indexing of `./pages`
- Static file serving.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041424Z" creationid="hirofumiwakasugi" creationdate="20181119T041424Z">
        <seg>- 完全自動の (webpack と babel を利用した) トランスパイルとビルド
- コードのホットリローディング
- `./pages` 配下のファイルの構造化とサーバーサイドレンダリング
- 静的ファイルの配布</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/Head&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074328Z" creationid="hirofumiwakasugi" creationdate="20181119T074328Z">
        <seg>&lt;/Head&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/div&gt;
)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041438Z" creationid="hirofumiwakasugi" creationdate="20181119T041438Z">
        <seg>&lt;/div&gt;
)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/pre&gt;
)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>&lt;/pre&gt;
)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074240Z" creationid="hirofumiwakasugi" creationdate="20181119T074240Z">
        <seg>&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;Head&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074325Z" creationid="hirofumiwakasugi" creationdate="20181119T074325Z">
        <seg>&lt;Head&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;b&gt;Examples&lt;/b&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042039Z" creationid="hirofumiwakasugi" creationdate="20181119T042039Z">
        <seg>&lt;b&gt;例&lt;/b&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;br/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095826Z" creationid="hirofumiwakasugi" creationdate="20181119T095826Z">
        <seg>&lt;br/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041430Z" creationid="hirofumiwakasugi" creationdate="20181119T041430Z">
        <seg>&lt;details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;div&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041433Z" creationid="hirofumiwakasugi" creationdate="20181119T041433Z">
        <seg>&lt;div&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/layout-component"&gt;Layout component&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074239Z" creationid="hirofumiwakasugi" creationdate="20181119T074239Z">
        <seg>&lt;li&gt;&lt;a target="_blank" href="/examples/layout-component"&gt;Layout component&lt;/a&gt;&lt;/li&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" /&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074328Z" creationid="hirofumiwakasugi" creationdate="20181119T074328Z">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" /&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074457Z" creationid="hirofumiwakasugi" creationdate="20181119T074457Z">
        <seg>&lt;meta name="viewport" content="initial-scale=1.0, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;meta name="viewport" content="initial-scale=1.2, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074458Z" creationid="hirofumiwakasugi" creationdate="20181119T074458Z">
        <seg>&lt;meta name="viewport" content="initial-scale=1.2, width=device-width" key="viewport" /&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;p&gt;Hello world!&lt;/p&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074329Z" creationid="hirofumiwakasugi" creationdate="20181119T074329Z">
        <seg>&lt;p&gt;Hello world!&lt;/p&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;p&gt;scoped!&lt;/p&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041433Z" creationid="hirofumiwakasugi" creationdate="20181119T041433Z">
        <seg>&lt;p&gt;scoped!&lt;/p&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;pre&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>&lt;pre&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;style global jsx&gt;{`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041436Z" creationid="hirofumiwakasugi" creationdate="20181119T041436Z">
        <seg>&lt;style global jsx&gt;{`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;style jsx&gt;{`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>&lt;style jsx&gt;{`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;summary&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042028Z" creationid="hirofumiwakasugi" creationdate="20181119T042028Z">
        <seg>&lt;summary&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041431Z" creationid="hirofumiwakasugi" creationdate="20181119T041431Z">
        <seg>&lt;summary&gt;&lt;b&gt;例&lt;/b&gt;&lt;/summary&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;title&gt;My page title&lt;/title&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074327Z" creationid="hirofumiwakasugi" creationdate="20181119T074327Z">
        <seg>&lt;title&gt;My page title&lt;/title&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/basic-css"&gt;Basic css&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041431Z" creationid="hirofumiwakasugi" creationdate="20181119T041431Z">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/basic-css"&gt;基本的な CSS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/data-fetch"&gt;Data fetch&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074958Z" creationid="hirofumiwakasugi" creationdate="20181119T074958Z">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/data-fetch"&gt;Data fetch&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styled-components"&gt;Styled components&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styletron"&gt;Styletron&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamor"&gt;Glamor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamorous"&gt;Glamorous&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-cxs"&gt;Cxs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-aphrodite"&gt;Aphrodite&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-fela"&gt;Fela&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042120Z" creationid="hirofumiwakasugi" creationdate="20181119T042120Z">
        <seg>&lt;ul&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styled-components"&gt;Styled components&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-styletron"&gt;Styletron&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamor"&gt;Glamor&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-glamorous"&gt;Glamorous&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-cxs"&gt;Cxs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-aphrodite"&gt;Aphrodite&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a target="_blank" href="/examples/with-fela"&gt;Fela&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/details&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; If you are using some server only modules inside `getInitialProps`, make sure to [import them properly](https://arunoda.me/blog/ssr-and-server-only-modules).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T100022Z" creationid="hirofumiwakasugi" creationdate="20181119T100022Z">
        <seg>&gt; もし `getInitialProps` の中でサーバーのみのモジュールを使っている場合、それらを[正しく import](https://arunoda.me/blog/ssr-and-server-only-modules) していないと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; Otherwise, it'll slow down your app.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T100047Z" creationid="hirofumiwakasugi" creationdate="20181119T100047Z">
        <seg>&gt; アプリケーションが遅くなってしまうため注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@media (max-width: 600px) {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041435Z" creationid="hirofumiwakasugi" creationdate="20181119T041435Z">
        <seg>@media (max-width: 600px) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After that, the file-system is the main API.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041418Z" creationid="hirofumiwakasugi" creationdate="20181119T041418Z">
        <seg>ファイルシステム自体をメインの API として利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Create a folder called `static` in your project root directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043613Z" creationid="hirofumiwakasugi" creationdate="20181119T043613Z">
        <seg>プロジェクトのルートディレクトリに `static` というディレクトリを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data returned from `getInitialProps` is serialized when server rendering, similar to a `JSON.stringify`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075706Z" creationid="hirofumiwakasugi" creationdate="20181119T075706Z">
        <seg>サーバーサイドレンダリング時には `getInitialProps` の戻り値のデータはシリアライズされます。ちょうど `JSON.stringify` と似た感じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every `.js` file becomes a route that gets automatically processed and rendered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041419Z" creationid="hirofumiwakasugi" creationdate="20181119T041419Z">
        <seg>すべての `.js` ファイルがルーティングとして機能し、それらのファイルは自動的に処理されレンダリングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every `import` you declare gets bundled and served with each page.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041426Z" creationid="hirofumiwakasugi" creationdate="20181119T041426Z">
        <seg>`import` したものはすべて「各ページごとに」バンドルされて配布されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the initial page load, `getInitialProps` will execute on the server only.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095608Z" creationid="hirofumiwakasugi" creationdate="20181119T095608Z">
        <seg>最初にページが読み込まれるとき、`getInitialProps` はサーバーサイドでのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From your code you can then reference those files with `/static/` URLs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043728Z" creationid="hirofumiwakasugi" creationdate="20181119T043728Z">
        <seg>From your code you can then reference those files with `/static/` URLs:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello world</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041433Z" creationid="hirofumiwakasugi" creationdate="20181119T041433Z">
        <seg>Hello world</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case only the second `&lt;meta name="viewport" /&gt;` is rendered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074524Z" creationid="hirofumiwakasugi" creationdate="20181119T074458Z">
        <seg>例えば上記の例では、2番目の `&lt;meta name="viewport" /&gt;` のみがレンダリングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Install it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041409Z" creationid="hirofumiwakasugi" creationdate="20181119T041409Z">
        <seg>以下を実行してインストールします:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can asynchronously fetch anything that resolves to a JavaScript plain `Object`, which populates `props`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075537Z" creationid="hirofumiwakasugi" creationdate="20181119T075537Z">
        <seg>このメソッドは、JavaScript のプレーンな `Object` として扱えるものであれば何でも非同期的に取得して、それを `props` に含めます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's possible to use any existing CSS-in-JS solution.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042146Z" creationid="hirofumiwakasugi" creationdate="20181119T042146Z">
        <seg>既存のどんな CSS-in-JS も利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure the returned object from `getInitialProps` is a plain `Object` and not using `Date`, `Map` or `Set`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075815Z" creationid="hirofumiwakasugi" creationdate="20181119T075815Z">
        <seg>`getInitialProps` が返すオブジェクトは必ず「プレーンな `Object`」でなければならず、`Date`,/ `Map` / `Set` は使用できないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that to load data when the page loads, we use `getInitialProps` which is an [`async`](https://zeit.co/blog/async-and-await) static method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075422Z" creationid="hirofumiwakasugi" creationdate="20181119T075422Z">
        <seg>ページが読み込まれるときのデータを設定するために [`async`](https://zeit.co/blog/async-and-await) で static な `getInitialProps` メソッドを使っていることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only in `pages`._</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095837Z" creationid="hirofumiwakasugi" creationdate="20181119T095824Z">
        <seg>利用できるのは `pages` に限られます。_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please see the [styled-jsx documentation](https://www.npmjs.com/package/styled-jsx) for more examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041438Z" creationid="hirofumiwakasugi" creationdate="20181119T041438Z">
        <seg>[styled-jsx のドキュメント](https://www.npmjs.com/package/styled-jsx) により多くの例が書かれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Populate `./pages/index.js` inside your project:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041420Z" creationid="hirofumiwakasugi" creationdate="20181119T041420Z">
        <seg>`./pages/index.js` ファイルをプロジェクトに追加してみましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So far, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041423Z" creationid="hirofumiwakasugi" creationdate="20181119T041423Z">
        <seg>これだけで以下が実現できています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That means pages never load unnecessary code!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041426Z" creationid="hirofumiwakasugi" creationdate="20181119T041426Z">
        <seg>これはつまり、ページに必要のないコードが無駄に読み込まれることがないということを意味しています！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The aim is to support "shadow CSS" similar to Web Components, which unfortunately [do not support server-rendering and are JS-only](https://github.com/w3c/webcomponents/issues/71).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041432Z" creationid="hirofumiwakasugi" creationdate="20181119T041432Z">
        <seg>これは Web Components の「Shadow CSS」に似た機能を提供することを目的としています (残念ながら Shadow CSS は[サーバーサイドレンダリングで利用することができません](https://github.com/w3c/webcomponents/issues/71))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The name is required and is the only directory that Next.js uses for serving static assets._</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074117Z" creationid="hirofumiwakasugi" creationdate="20181119T074117Z">
        <seg>ディレクトリはこの名前である必要があり、Next.js が静的なアセットをサーブするための唯一のディレクトリとなります。_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simplest one is inline styles:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T042209Z" creationid="hirofumiwakasugi" creationdate="20181119T042209Z">
        <seg>一番シンプルなのはインラインで記述するものでしょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid duplicate tags in your `&lt;head&gt;` you can use the `key` property, which will make sure the tag is only rendered once:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074456Z" creationid="hirofumiwakasugi" creationdate="20181119T074456Z">
        <seg>`&lt;head&gt;` の中で要素が重複するのを避けるために `key` プロパティを使うことができます。これによって、あるタグが一度だけレンダリングされることを保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see how simple this is, check out the [sample app - nextgram](https://github.com/zeit/nextgram)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041425Z" creationid="hirofumiwakasugi" creationdate="20181119T041425Z">
        <seg>実際にこれがどれだけシンプルにできるかは、[nextgram というサンプルアプリケーション](https://github.com/zeit/nextgram)をチェックしてみるとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To support importing `.css`, `.scss`, `.less` or `.styl` files you can use these modules, which configure sensible defaults for server rendered applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043515Z" creationid="hirofumiwakasugi" creationdate="20181119T043515Z">
        <seg>`.css` / `.scss` / `.less` / `.styl` ファイルをインポートするためには、サーバーサイドでリンダリングされるアプリケーション用の設定が施された以下のモジュールを利用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use another port, you can run `npm run dev -- -p &lt;your port here&gt;`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041422Z" creationid="hirofumiwakasugi" creationdate="20181119T041422Z">
        <seg>別のポートに変更したい場合は `npm run dev -- -p &lt;ポート番号&gt;` として起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use more sophisticated CSS-in-JS solutions, you typically have to implement style flushing for server-side rendering.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043230Z" creationid="hirofumiwakasugi" creationdate="20181119T043230Z">
        <seg>より洗練された CSS-in-JS のソリューションを使いたい場合には、サーバーサイドレンダリングでスタイルを設定するための実装を追加する必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We bundle [styled-jsx](https://github.com/zeit/styled-jsx) to provide support for isolated scoped CSS.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041432Z" creationid="hirofumiwakasugi" creationdate="20181119T041432Z">
        <seg>Next.js には [styled-jsx](https://github.com/zeit/styled-jsx) の機能が同梱されており、スコープを分離した CSS の適用が可能になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We enable this by allowing you to define your own [custom `&lt;Document&gt;`](#user-content-custom-document) component that wraps each page.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T043311Z" creationid="hirofumiwakasugi" creationdate="20181119T043311Z">
        <seg>これは、独自の[カスタム `&lt;Document&gt;`](#user-content-custom-document) コンポーネントを定義することで実現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We expose a built-in component for appending elements to the `&lt;head&gt;` of the page.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074324Z" creationid="hirofumiwakasugi" creationdate="20181119T074324Z">
        <seg>ページの `&lt;head&gt;` に要素を追加するために組み込みのコンポーネントを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you need state, lifecycle hooks or **initial data population** you can export a `React.Component` (instead of a stateless function, like shown above):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075255Z" creationid="hirofumiwakasugi" creationdate="20181119T075251Z">
        <seg>状態、ライフサイクルフック、そして **初期データの設定** を行う必要がある場合、(これまで紹介してきたステートレスな関数ではなく) `React.Component` を export することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also define the `getInitialProps` lifecycle method for stateless components:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T100124Z" creationid="hirofumiwakasugi" creationdate="20181119T100124Z">
        <seg>ステートレスなコンポーネントでも `getInitialProps` ライフサイクルメソッドを定義することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_Note: Don't name the `static` directory anything else.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074021Z" creationid="hirofumiwakasugi" creationdate="20181119T074021Z">
        <seg>_注意: ディレクトリ名は必ず `static` としてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_Note: The contents of `&lt;head&gt;` get cleared upon unmounting the component, so make sure each page completely defines what it needs in `&lt;head&gt;`, without making assumptions about what other pages added_</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074833Z" creationid="hirofumiwakasugi" creationdate="20181119T074505Z">
        <seg>_注意: `&lt;head&gt;` の内容はコンポーネントがアンマウントされる際に消去されるため、各ページは `&lt;head&gt;` で必要とするものをすべて定義しておく必要があります。他のページで追加しているものに依存することはできません。_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>_Note: `getInitialProps` can **not** be used in children components.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095755Z" creationid="hirofumiwakasugi" creationdate="20181119T095755Z">
        <seg>_注意: `getInitialProps` を子コンポーネントで利用することは**できません**。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`./static/` is mapped to `/static/` (given you [create a `./static/` directory](#static-file-serving-eg-images) inside your project)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041424Z" creationid="hirofumiwakasugi" creationdate="20181119T041424Z">
        <seg>`./static/` は `/static/` にマッピングされます (プロジェクトに [`./static/` ディレクトリを作成](#static-file-serving-eg-images)する必要があります。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
npm install --save next react react-dom
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041410Z" creationid="hirofumiwakasugi" creationdate="20181119T041410Z">
        <seg>```bash
npm install --save next react react-dom
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```json
{</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041411Z" creationid="hirofumiwakasugi" creationdate="20181119T041411Z">
        <seg>```json
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
const Page = ({ stars }) =&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T102046Z" creationid="hirofumiwakasugi" creationdate="20181119T102046Z">
        <seg>```jsx
const Page = ({ stars }) =&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
export default () =&gt; (</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041432Z" creationid="hirofumiwakasugi" creationdate="20181119T041432Z">
        <seg>```jsx
export default () =&gt; (</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
export default () =&gt; &lt;div&gt;Welcome to next.js!&lt;/div&gt;
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041421Z" creationid="hirofumiwakasugi" creationdate="20181119T041421Z">
        <seg>```jsx
export default () =&gt; &lt;div&gt;Welcome to next.js!&lt;/div&gt;
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
export default () =&gt; &lt;img src="/static/my-image.png" alt="my image" /&gt;
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T073907Z" creationid="hirofumiwakasugi" creationdate="20181119T073907Z">
        <seg>```jsx
export default () =&gt; &lt;img src="/static/my-image.png" alt="my image" /&gt;
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
import Head from 'next/head'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T074325Z" creationid="hirofumiwakasugi" creationdate="20181119T074325Z">
        <seg>```jsx
import Head from 'next/head'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
import React from 'react'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075256Z" creationid="hirofumiwakasugi" creationdate="20181119T075256Z">
        <seg>```jsx
import React from 'react'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```jsx
import cowsay from 'cowsay-browser'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041427Z" creationid="hirofumiwakasugi" creationdate="20181119T041427Z">
        <seg>```jsx
import cowsay from 'cowsay-browser'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`getInitialProps` will only be executed on the client when navigating to a different route via the `Link` component or using the routing APIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T095712Z" creationid="hirofumiwakasugi" creationdate="20181119T095712Z">
        <seg>`getInitialProps` がクライアントサイドで実行されるのは、`Link` コンポーネントかルーティング API を用いて別のルートに移動した場合のみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`}&lt;/style&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041436Z" creationid="hirofumiwakasugi" creationdate="20181119T041436Z">
        <seg>`}&lt;/style&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and add a script to your package.json like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041411Z" creationid="hirofumiwakasugi" creationdate="20181119T041411Z">
        <seg>次に、package.json にスクリプトを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and then just run `npm run dev` and go to `http://localhost:3000`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041422Z" creationid="hirofumiwakasugi" creationdate="20181119T041422Z">
        <seg>追加したら、`npm run dev` を実行し、`http://localhost:3000` を開いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>background: black;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041437Z" creationid="hirofumiwakasugi" creationdate="20181119T041437Z">
        <seg>background: black;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>background: blue;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041436Z" creationid="hirofumiwakasugi" creationdate="20181119T041436Z">
        <seg>background: blue;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>background: red;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041435Z" creationid="hirofumiwakasugi" creationdate="20181119T041435Z">
        <seg>background: red;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>body {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041437Z" creationid="hirofumiwakasugi" creationdate="20181119T041437Z">
        <seg>body {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>color: blue;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>color: blue;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>div {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041435Z" creationid="hirofumiwakasugi" creationdate="20181119T041435Z">
        <seg>div {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>export default () =&gt; (</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041427Z" creationid="hirofumiwakasugi" creationdate="20181119T041427Z">
        <seg>export default () =&gt; (</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>export default class extends React.Component {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T075257Z" creationid="hirofumiwakasugi" creationdate="20181119T075257Z">
        <seg>export default class extends React.Component {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>p {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{cowsay.say({ text: 'hi there!' })}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041428Z" creationid="hirofumiwakasugi" creationdate="20181119T041428Z">
        <seg>{cowsay.say({ text: 'hi there!' })}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041434Z" creationid="hirofumiwakasugi" creationdate="20181119T041434Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}
}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20181119T041414Z" creationid="hirofumiwakasugi" creationdate="20181119T041414Z">
        <seg>}
}
```</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
